mainmodule simpleZeroCopy {

  readonly int numElements;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void done();
  };

  array [1D] zerocopyObject{
    entry zerocopyObject();
    entry void testZeroCopy(CProxy_Main mProxy);
    entry void zerocopySent(CkDataMsg *msg);
    entry void send(int n1, int ptr1[n1], int n2, double ptr2[n2], int n3, char ptr3[n3]);
    entry void zerocopySend(int n1, nocopy int ptr1[n1], int n2, nocopy double ptr2[n2], int n3, nocopy char ptr3[n3]);
    entry void mixedSend(int n1, int ptr1[n1], int n2, nocopy double ptr2[n2], int n3, nocopy int ptr3[n3], int n4, double ptr4[n4]);

    entry void sdagRun() {
      serial {
        // send num arrays to its partner
        for(int i = 1; i <= num; i++)
          thisProxy[destIndex].sdagRecv(iter, iSize1, CkSendBuffer(iArr1, sdagCb), dSize2, CkSendBuffer(dArr2, sdagCb));
      }

      // wait for num arrays from partner
      for (j = 1; j <= num; j++){
        when sdagRecv[iter] (int iter, int n1, nocopy int ptr1[n1], int n2, nocopy double ptr2[n2]){
          serial {
            // increment counter on receiving a sdagRecv
            sdagZeroCopyRecvCounter++;
            compareArray(ptr1, iArr1, n1);
            compareArray(ptr2, dArr2, n2);

            // check that all sends and recvs have completed and then advance
            if(sdagZeroCopySentCounter == 2*num && sdagZeroCopyRecvCounter == num)
              nextStep();
          }
        }
      }
    }

    entry void sdagZeroCopySent(CkDataMsg *msg);
    entry void sdagRecv(int iter, int n1, nocopy int ptr1[n1], int n2, nocopy double ptr2[n2]);
  };

}
