mainmodule jacobi2d {
  include "jacobi2d.h";

  readonly CProxy_Main main_proxy;
  readonly CProxy_Block block_proxy;
  readonly int grid_width;
  readonly int grid_height;
  readonly int block_width;
  readonly int block_height;
  readonly int n_chares_x;
  readonly int n_chares_y;
  readonly int n_iters;
  readonly int warmup_iters;
  readonly bool sync_ver;
  readonly bool use_zerocopy;
  readonly bool print_elements;

  mainchare Main {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void initDone();
    entry void startIter();
    entry [reductiontarget] void updateDone();
    entry [reductiontarget] void commDone();
    entry [reductiontarget] void allDone();
    entry void printDone();
  };

  array [2D] Block {
    entry Block(void);
    entry void init();
    entry void initDone();
    entry void update();
    entry void updateDone();
    entry void packGhosts();
    entry void packGhostsDone();
    entry void receiveGhostsZC(int ref, int dir, int w, nocopydevice DataType gh[w]);
    entry void receiveGhostsReg(int ref, int dir, int w, DataType gh[w]);

    entry void exchangeGhosts() {
      serial {
        my_iter++;
        update();
        if (!sync_ver) packGhosts();
      }

      when packGhostsDone() {
        serial {
          // When packing is done, we know that the new temperatures have been updated
          // (because the host doesn't separately detect when the Jacobi kernel completes)
          std::swap(d_temperature, d_new_temperature);
          sendGhosts();
        }
      }

      for (remote_count = 0; remote_count < neighbors; remote_count++) {
        if (use_zerocopy) {
          when receiveGhostsZC[my_iter](int ref, int dir, int w, nocopydevice DataType buf[w]) {
            serial {
              processGhostsZC(dir, w, buf);
            }
          }
        } else {
          when receiveGhostsReg[my_iter](int ref, int dir, int w, DataType buf[w]) {
            serial {
              processGhostsReg(dir, w, buf);
            }
          }
        }
      }

      serial {
        if (sync_ver || my_iter <= warmup_iters) {
          contribute(CkCallback(CkReductionTarget(Main, commDone), main_proxy));
        } else {
          if (my_iter < warmup_iters + n_iters) {
            thisProxy[thisIndex].exchangeGhosts();
          } else {
            contribute(CkCallback(CkReductionTarget(Main, allDone), main_proxy));
          }
        }
      }
    }

    entry void print();
  };
};
