mainmodule stencil2d {
  readonly CProxy_Main mainProxy;
  readonly int grid_x;
  readonly int grid_y;
  readonly int block_x;
  readonly int block_y;
  readonly int num_chares_x;
  readonly int num_chares_y;
  readonly int num_iters;
  readonly int global_exec_mode;
  readonly int thread_size;
  readonly float offload_ratio;
  readonly bool gpu_prio;
  readonly int gpu_pes;

  group CustomMap : CkArrayMap {
    entry CustomMap();
  };

  message CallbackMsg;

  mainchare Main {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void initDone();
    entry [reductiontarget] void done(double time);
  };

  array [2D] Stencil {
    entry Stencil(void);
    entry void init();
    entry void receiveGhosts(int ref, int dir, int w, double gh[w]);

    entry void iterate(CallbackMsg* m) {
      serial {
        delete m;

        // Measure iteration time
        if (my_iter > 0) {
          agg_time += CkWallTimer() - iter_start_time;
        }
        iter_start_time = CkWallTimer();

        // Terminate if all iterations are complete
        if (my_iter >= num_iters) {
          CkPrintf("[%*d] Average time per iteration: %lf\n", n_digits,
                   thisFlatIndex, agg_time / num_iters);
          CkCallback cb(CkReductionTarget(Main, done), mainProxy);
          contribute(sizeof(double), &agg_time, CkReduction::sum_double, cb);
        }

        // Send ghost data to neighbors
        sendGhosts();
      }

      // Receive ghost data from neighbors
      for (remote_count = 0; remote_count < neighbors; remote_count++) {
        when receiveGhosts[my_iter](int ref, int dir, int w, double buf[w]) serial {
          processGhosts(dir, w, buf);
        }
      }

      serial {
        // Perform stencil computation
        update();

        my_iter++;
      }
    };
  };
};
