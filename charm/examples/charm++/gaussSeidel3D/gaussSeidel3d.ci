mainmodule gaussSeidel3d {

  readonly CProxy_Main mainProxy;
  readonly int arrayDimX;
  readonly int arrayDimY;
  readonly int arrayDimZ;
  readonly int blockDimX;
  readonly int blockDimY;
  readonly int blockDimZ;

  readonly int num_chare_x;
  readonly int num_chare_y;
  readonly int num_chare_z;

  readonly int globalBarrier;

  message ghostMsg {
    double gh[];
  };

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void report();
  };

  array [3D] GaussSeidel {
    entry GaussSeidel(void);
    entry void begin_iteration(void);
    entry void receiveGhostsCurrentX(ghostMsg *gmsg);
    entry void receiveGhostsCurrentY(ghostMsg *gmsg);
    entry void receiveGhostsCurrentZ(ghostMsg *gmsg);
    entry void receiveGhostsPrevX(ghostMsg *gmsg);
    entry void receiveGhostsPrevY(ghostMsg *gmsg);
    entry void receiveGhostsPrevZ(ghostMsg *gmsg);

    entry void processGhosts(ghostMsg *gmsg);

    entry void doStep() {
      serial "begin_iteration" {
	begin_iteration();
      }

      if(thisIndex.x < num_chare_x-1){
	when receiveGhostsPrevX[iterations] (ghostMsg *gmsg) {
	  serial "process ghosts X prev" { processGhosts(gmsg); }
        }    
      }

      if(thisIndex.y < num_chare_y-1){
	when receiveGhostsPrevY[iterations] (ghostMsg *gmsg) {

	  serial "process ghosts Y prev" { processGhosts(gmsg); }
        }    
      }

      if(thisIndex.z < num_chare_z-1){
	when receiveGhostsPrevZ[iterations] (ghostMsg *gmsg) {
	  serial "process ghosts Z prev" { processGhosts(gmsg); }
        }    
      }

      if(thisIndex.x > 0){
	when receiveGhostsCurrentX[iterations] (ghostMsg *gmsg) {
	  serial "process ghosts X current" { processGhosts(gmsg); }
        }     
      }

      if(thisIndex.y > 0){
	when receiveGhostsCurrentY[iterations] (ghostMsg *gmsg) {
	  serial "process ghosts Y current" { processGhosts(gmsg); }
        }     
      }

      if(thisIndex.z > 0){
	when receiveGhostsCurrentZ[iterations] (ghostMsg *gmsg) {
	  serial "process ghosts Z current" { processGhosts(gmsg); }
        }     
      }



      serial "doWork" {
	compute();
      }
    };
  };


};
