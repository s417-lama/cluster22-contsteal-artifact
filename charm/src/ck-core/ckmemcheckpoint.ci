// double checkpointing in memory

module CkMemCheckpoint {

  readonly CkGroupID ckCheckPTGroupID;

  message CkArrayCheckPTMessage {
        double packData[];
  };    
  message CkProcCheckPTMessage {
        char packData[];
  };    
  message CkArrayCheckPTReqMessage;

  group [migratable] CkMemCheckPT {
        entry CkMemCheckPT(int w);
	entry void createEntry(CkArrayID, CkGroupID, CkArrayIndex, int);
 	// checkpointing
        entry [expedited] void doItNow(int spe, CkCallback &);  //checkpointing
 	entry void recvData(CkArrayCheckPTMessage *);
 	entry void recvArrayCheckpoint(CkArrayCheckPTMessage *);
 	entry void gotData();
	entry void recvProcData(CkProcCheckPTMessage *);
	entry [reductiontarget] void syncFiles();
 	entry [reductiontarget] void cpFinish();
 	entry void report();
	// restart
        entry [expedited] void restart(int);
  	entry [reductiontarget] void resetReductionMgr();
	entry [reductiontarget] void removeArrayElements();
 	entry [reductiontarget] void recoverBuddies();
	entry void recoverEntry(CkArrayCheckPTMessage *msg);
 	entry [reductiontarget] void recoverArrayElements();
	entry [reductiontarget] void finishUp();
	entry void gotReply();
	entry void quiescence(CkCallback&);
        entry void inmem_restore(CkArrayCheckPTMessage *m);
	entry void updateLocations(int n, CkGroupID g[n], CkArrayIndex idx[n], CmiUInt8 id[n], int nowOnPe);
  };

  initproc void CkRegisterRestartHandler();

  mainchare CkMemCheckPTInit {
	entry CkMemCheckPTInit(CkArgMsg *m);
  };
};
