module CkArray {
  extern module CkReduction;
  extern module CkLocation;

  class MsgPointerWrapper;

  readonly bool _isAnytimeMigration;
  
  group [migratable] CkArray : CkReductionMgr {
    entry CkArray(CkArrayOptions opts, CkMarshalledMessage ctorMsg);

    // Insertion
    entry [inline] void insertElement(CkMarshalledMessage, CkArrayIndex,
        int listenerData[CK_ARRAYLISTENER_MAXLEN]);
    entry [inline] void demandCreateElement(const CkArrayIndex &idx, int ctor);
    entry void remoteBeginInserting(void);
    entry void sendZCBroadcast(MsgPointerWrapper p);
    entry void remoteDoneInserting(void);
    entry void initDone(void);

    //Broadcast
    entry void sendBroadcast(CkMessage *);
    entry void recvBroadcast(CkMessage *);
    entry void recvBroadcastViaTree(CkMessage *);
    entry [expedited] void sendExpeditedBroadcast(CkMessage *);
    entry [expedited] void recvExpeditedBroadcast(CkMessage *);
    entry [expedited] void incrementBcastNoAndSendBack(int srcPe, MsgPointerWrapper p);
    entry [nokeep] void recvNoKeepBroadcast(CkMessage *);
    entry void sendNoKeepBroadcast(CkMessage *);
    entry [expedited,nokeep] void recvNoKeepExpeditedBroadcast(CkMessage *);
    entry [expedited] void sendNoKeepExpeditedBroadcast(CkMessage *);

    entry void ckDestroy();
  };

  PUPable CkVerboseListener;
  PUPable CkArrayBroadcaster;
  PUPable CkArrayReducer;

  // COMLIB HACK
  //PUPable ComlibArrayListener;

  initproc void _ckArrayInit(void);

  array [none] ArrayElement {
    entry ArrayElement();
    //Calls destructor:
    entry void ckDestroy(void);
    entry void recvBroadcast(CkMessage *);
    // CMK_MEM_CHECKPOINT
    entry void inmem_checkpoint(CkArrayCheckPTReqMessage *);
    // _PIPELINED_ALLREDUCE_
    entry void defrag(CkReductionMsg*);
    // Called by migrateMe
    entry void ckEmigrate(int toPe);
  };

  message CkCreateArrayAsyncMsg {
    char ctorPayload[];
  };

  message CkArrayCreatedMsg {
    CkArrayID aid;
  };

};
