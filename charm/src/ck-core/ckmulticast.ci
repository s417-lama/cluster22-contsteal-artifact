
module CkMulticast {
  message cookieMsg;
  message multicastSetupMsg {
    CkArrayIndex arrIdx[];
    int  peElems[];
  };
  message multicastGrpMsg;
//  message CkMcastReductionMsg {
//    char data[];
//  };
  
  group [migratable] CkMulticastMgr {
    entry CkMulticastMgr(int _dfactor = 2, unsigned int _split_size = 32768, unsigned int _split_threshold = 32768);
    // set up
    entry void setup(multicastSetupMsg *);
    entry void recvCookie(CkSectionInfo sid, CkSectionInfo child);
    entry void teardown(CkSectionInfo sid);
    entry void freeup(CkSectionInfo sid);
    entry void retrieveCookie(CkSectionInfo s, CkSectionInfo srcInfo);
    entry void recvCookieInfo(CkSectionInfo s, int red);
    entry void retire(CkSectionInfo sid, CkSectionInfo root);
    // multicast
    entry [expedited, notrace] void recvMsg(multicastGrpMsg *m);
    entry [expedited, notrace] void sendToLocal(multicastGrpMsg *m);
    entry [expedited, notrace] void recvPacket(CkSectionInfo _cookie, int offset, int n, char data[n], int seqno, int count, int totalsize, int frombufer);
    // reduction
    entry [expedited, notrace] void recvRedMsg(CkReductionMsg *msg);
    entry void updateRedNo(mCastEntryPtr e, int no);
  };

  initnode void _ckMulticastInit(void);
};
