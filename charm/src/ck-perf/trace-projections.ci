module TraceProjections {

  message KMeansStatsMessage {
    bool filter[];
    double kSeedsPos[];
    double stats[];
  };

  message KSeedsMessage {
    double kSeedsPos[];
  };

  message KSelectionMessage {
    int minIDs[];
    int maxIDs[];
  };

  mainchare TraceProjectionsInit {
    // This initialization happens at the start of the program and is
    //   intended to allow commandline arguments to be passed into
    //   trace-projections.
    entry TraceProjectionsInit(CkArgMsg *m);
  };

  // initcalls are automatically executed by the runtime just before
  //   computation begins. It is assumed this happens before mainchares are
  //   initialized as it is intended for important runtime registrations.
  // In this case, we have user-specific reductions and the registration of
  //   an module exit function.
  initnode void registerOutlierReduction(void);
  initnode void initTraceProjectionsBOC(void);
  
  readonly CkGroupID traceProjectionsGID;
  readonly CkGroupID kMeansGID;

  // "shadow" BOC for TraceProjectionsBOC, specialized for KMeans computations
  group [migratable] KMeansBOC {
    entry KMeansBOC(bool, int, int, double, bool);
    
    entry void startKMeansAnalysis(void);
    entry [reductiontarget] void flushCheck(bool);
    entry void flushCheckDone(void);
    entry void getNextPhaseMetrics(void);
    entry [reductiontarget] void globalMetricRefinement(CkReductionMsg * msg);
    entry void findInitialClusters(KMeansStatsMessage *);
    entry [reductiontarget] void updateKSeeds(double result[n], int n);
    entry void updateSeedMembership(KSeedsMessage *);
    entry void collectDistances(KSelectionMessage *);
    entry [reductiontarget] void findNextMinMax(CkReductionMsg *msg);
    entry void phaseDone(void);
  };

  group [migratable] TraceProjectionsBOC {
    entry TraceProjectionsBOC(bool, bool);

    entry void traceProjectionsParallelShutdown(int);
    entry void startTimeAnalysis(void);
    entry [reductiontarget] void startTimeDone(double);
    entry void startEndTimeAnalysis(void);
    entry [reductiontarget] void endTimeDone(double);
    entry [reductiontarget] void kMeansDone();
    entry void kMeansDoneFlushed(void);
    entry void finalize(void);
    entry void closingTraces(void);
    entry [reductiontarget] void closeParallelShutdown(void);

    entry void flush_warning(int pe);
  };

};

