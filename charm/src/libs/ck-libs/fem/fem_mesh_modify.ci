/* File: fem_mesh_modify.ci
 * Authors: Nilesh Choudhury
 * 
 */

module FEMMeshModify {

  readonly CProxy_femMeshModify meshMod;

  message femMeshModMsg;
  message boolMsg;
  message intMsg;
  message int2Msg;
  message double2Msg;
  message FEMMeshMsg;
  message sharedNodeMsg {
    int between[];
  };
  message removeSharedNodeMsg;
  message addNodeMsg {
    int between[];
    int chunks[];
  };
  message addGhostElemMsg {
    int ghostIndices[];
    int sharedIndices[];
  };
  message chunkListMsg {
    int chunkList[];
    int indexList[];
  };
  message addElemMsg {
    int conn[];
    int ghostIndices[];
  };
  message removeGhostElemMsg {
    int ghostIndices[];
    int ghostRNIndices[];
    int ghostREIndices[];
    int sharedIndices[];
  };
  message removeElemMsg;
  /*message ghostNdsEltsMsg {
    int ghostElts[];
    int ghostNds[];
  };*/
  message verifyghostsendMsg {
    int chunks[];
  };
  message findgsMsg {
    int chunks[];
  };
  message elemDataMsg {
    char data[];
  };

  array [1D] femMeshModify {
    entry femMeshModify(femMeshModMsg *);
    entry [sync,threaded] void setFemMesh(FEMMeshMsg *);
    entry [sync,threaded] intMsg *lockRemoteChunk(int2Msg *);
    entry [sync,threaded] intMsg *unlockRemoteChunk(int2Msg *);
    entry [sync,threaded] intMsg *lockRemoteNode(int, int, int, int);
    entry [sync,threaded] intMsg *unlockRemoteNode(int, int, int, int);
    entry [sync,threaded] intMsg *addNodeRemote(addNodeMsg *);
    entry [sync,threaded] void addSharedNodeRemote(sharedNodeMsg *);
    entry [sync,threaded] void removeSharedNodeRemote(removeSharedNodeMsg *);
    entry [sync,threaded] void addGhostElem(addGhostElemMsg *);
    entry [sync,threaded] chunkListMsg *getChunksSharingGhostNode(int2Msg *);
    entry [sync,threaded] void addElementRemote(addElemMsg *fm);
    entry [sync,threaded] void removeGhostElem(removeGhostElemMsg *);
    entry [sync,threaded] void removeElementRemote(removeElemMsg *);
    entry [sync,threaded] void removeGhostNode(int fromChk, int sharedIdx);
    entry [sync,threaded] void refine_flip_element_leb(int, int, int, int, int, int, double);
    entry [sync,threaded] void addToSharedList(int, int);
    entry [sync,threaded] void updateNodeAttrs(int, int, double, double, int, bool);
    entry [sync,threaded] double2Msg *getRemoteCoord(int, int);
    entry [sync,threaded] intMsg *getRemoteBound(int, int);
    entry [sync,threaded] intMsg *getIdxGhostSend(int, int, int);
    entry [sync,threaded] void updateIdxlList(int, int, int);
    entry [sync,threaded] void removeIDXLRemote(int, int, int);
    entry [sync,threaded] void addTransIDXLRemote(int, int, int);
    entry [sync,threaded] void verifyIdxlList(int, int, int);
    entry [sync,threaded] void idxllockRemote(int, int);
    entry [sync,threaded] void idxlunlockRemote(int, int);
    entry [sync,threaded] intMsg* eatIntoElement(int, int);
    entry [sync,threaded] intMsg *getLockOwner(int, int);
    entry [sync,threaded] boolMsg *knowsAbtNode(int, int, int);
    entry [sync,threaded] intMsg* hasLockRemoteNode(int, int, int);
    entry [sync,threaded] void modifyLockAll(int, int);
    entry [sync,threaded] boolMsg *verifyLock(int, int, int);
    entry [sync,threaded] void updateghostsend(verifyghostsendMsg *);
    entry [sync,threaded] void verifyghostsend(verifyghostsendMsg *);
    entry [sync,threaded] findgsMsg *findghostsend(int, int);
    entry [sync,threaded] boolMsg *shouldLoseGhost(int, int, int);
    entry [sync,threaded] void addghostsendl(int, int, int, int);
    entry [sync,threaded] void addghostsendl1(int, int, int);
    entry [sync,threaded] void addghostsendr(int, int, int, int);
    entry [sync,threaded] void addghostsendr1(int, int, int);
    entry [sync,threaded] boolMsg *willItLose(int, int);
    entry [sync,threaded] void interpolateElemCopy(int, int, int);
    entry [sync,threaded] void cleanupIDXL(int, int);
    entry [sync,threaded] void purgeElement(int, int);
    entry [sync,threaded] elemDataMsg *packElemData(int fromChk, int sharedIdx);
  };
};
