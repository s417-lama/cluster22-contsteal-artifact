// Triangular Mesh Refinement & Coarsening Framework - 2D (TMRC2D)
// Created by: Terry L. Wilmarth

module refine {
  // ----------------------------- Messages ---------------------------------
  message chunkMsg;
  message splitOutMsg;
  message refMsg; 
  message intMsg;
  message doubleMsg;
  message boolMsg;

  // ------------------------ Global Read-only Data -------------------------
  readonly CProxy_chunk mesh;
  initproc void refineChunkInit(void);

  // ---------------------------- Chare Arrays ------------------------------
  array [1D] chunk {
    entry chunk(chunkMsg *);
    entry void addRemoteEdge(int, int, edgeRef);
    entry void refineElement(int, double);
    entry [threaded] void refiningElements();	
    entry void coarsenElement(int, double);
    entry [threaded] void coarseningElements();	
    entry [sync] intMsg *safeToMoveNode(int, double, double);
    entry [sync, threaded] splitOutMsg *split(int, elemRef, int, int);
    entry [sync, threaded] void collapse(int, elemRef, int, int, 
	elemRef, elemRef, edgeRef, edgeRef, node, double);
    entry [sync, threaded] splitOutMsg *flipPreventE(int, elemRef, int, int, 
	elemRef, elemRef, edgeRef, edgeRef, node);
    entry [sync, threaded] void nodeReplaceDelete(int, int, node, int shared, 
	int chk[shared], int idx[shared]);
    entry [sync, threaded] boolMsg *flipPrevent(int, int, node, int shared, 
	int chk[shared], int idx[shared]);
    entry [sync] intMsg *isPending(int, objRef);
    entry void checkPending(int, objRef);
    entry void checkPending(int, objRef, objRef);
    entry [sync] void updateElement(int, objRef, objRef, int);
    entry [sync] void updateElementEdge(int, objRef, objRef);
    entry void updateReferences(int, objRef, objRef);
    entry [sync, threaded] doubleMsg *getArea(int);
    entry [sync] void resetEdge(int);
    entry [sync] refMsg *getNbr(int, objRef);
    entry [sync] void setTargetArea(int, double);
    entry [sync] void resetTargetArea(int, double);
    entry void reportPos(int, double, double);
    entry [sync, threaded] void print();
    entry [sync, threaded] void out_print();
    entry void tweakMesh();
    entry void improveChunk();
    entry [sync, threaded] void improve();
    entry [sync] intMsg *addNode(node, int, int, int);
    entry [sync] void removeNode(int);
    entry [sync] void removeEdge(int);
    entry [sync] void removeElement(int);
    entry [sync] intMsg *lockChunk(int lhc, int lhi, double prio);
    entry [sync] void unlockChunk(int lhc, int lhi);
    entry [sync] void fixNode(int nIdx, int chkid);
    entry [sync] intMsg *getBoundary(int edgeIdx);
    entry [sync] void incnonCoarsen(int idx);
    entry [sync] void resetnonCoarsen(int idx);
    entry [sync] intMsg *neighboring(int, elemRef);
    entry [sync] intMsg *safeToCoarsen(int, edgeRef);
  };
};
