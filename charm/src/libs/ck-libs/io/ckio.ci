module CkIO {

  namespace Ck { namespace IO {
      message FileReadyMsg;
      message SessionReadyMsg;
      message SessionCommitMsg;
    }
  }

  initnode _registerCkIO_impl();
};

module CkIO_impl {
  include "ckio.h";

  namespace Ck { namespace IO {
      namespace impl {
        readonly CProxy_Director director;

        mainchare [migratable] Director
        {
          entry Director(CkArgMsg *);

          /// Serialize setting up each file through this chare, so that all PEs
          /// have the same sequence
          entry void openFile(std::string name, CkCallback opened, Options opts);
          entry [reductiontarget] void fileOpened(FileToken file);
          entry [reductiontarget] void sessionComplete(FileToken file);

          entry void prepareWriteSession(FileToken file, size_t bytes, size_t offset,
                                         CkCallback ready, CkCallback complete) {
            serial {
              prepareWriteSession_helper(file, bytes, offset, ready, complete);
            }
            when sessionReady[files[file].sessionID](CkReductionMsg *m) serial {
              delete m;
              ready.send(new SessionReadyMsg(Session(file, bytes, offset,
                                                     files[file].session)));
            }
          };
          entry void prepareWriteSession(FileToken file, size_t bytes, size_t offset,
                                         CkCallback ready, const char commitData[commitBytes],
                                         size_t commitBytes, size_t commitOffset,
                                         CkCallback complete) {
            serial {
              CkCallback committed(CkIndex_Director::sessionDone(NULL), thisProxy);
              committed.setRefnum(++sessionID);
              prepareWriteSession_helper(file, bytes, offset, ready, committed);
            }
            when sessionReady[files[file].sessionID](CkReductionMsg *m) serial {
              delete m;
              ready.send(new SessionReadyMsg(Session(file, bytes, offset,
                                                     files[file].session)));
            }
            when sessionDone[files[file].sessionID](CkReductionMsg *m) serial {
              delete m;
              impl::FileInfo* info = CkpvAccess(manager)->get(file);
              CmiInt8 ret = CmiPwrite(info->fd, commitData, commitBytes, commitOffset);
              if (ret != commitBytes)
                fatalError("Commit write failed", info->name);
              complete.send(CkReductionMsg::buildNew(0, NULL, CkReduction::nop));
            }
          };
          entry void sessionReady(CkReductionMsg *);
          entry void sessionDone(CkReductionMsg *);
          entry void close(FileToken token, CkCallback closed);
        }

        group [migratable] Manager
        {
          entry Manager();
          entry void run() {
            while (true) {
              case {
                when openFile[opnum](unsigned int opnum_,
                                     FileToken token, std::string name, Options opts)
                  serial { prepareFile(token, name, opts); }
                when close[opnum](unsigned int opnum_, FileToken token, CkCallback closed)
                  serial { doClose(token, closed); }
              }
              serial { opnum++; }
            }
          };
          entry void openFile(unsigned int opnum,
                              FileToken token, std::string name, Options opts);
          entry void close(unsigned int opnum, FileToken token, CkCallback closed);
        };

        array [1D] WriteSession
        {
          entry WriteSession(FileToken file, size_t offset, size_t bytes);
          entry void forwardData(const char data[bytes], size_t bytes, size_t offset);
          entry void syncData();
        };

        group Map : CkArrayMap
        {
          entry Map();
        };
      }
    }
  }
}
