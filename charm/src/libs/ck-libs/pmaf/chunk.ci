/// Interface of Parallel Mesh Adaptivity Framework
/** So this is what we have.... */
module PMAF {
  // ----------------------------- Messages ---------------------------------
  message nodeMsg;
  message nodeVoteMsg;
  message faceMsg;
  message updateMsg;
  message refMsg;
  message intMsg;
  message doubleMsg;
  message meshMsg {
    int conn[];
    int gid[];
    int surface[];
  };
  message coordMsg {
    double coords[];
    int fixedNodes[];
  };
  message threeNodeMsg;
  message splitResponse;
  message flip23request;
  message flip23response;
  message flip32request;
  message flip32response;
  message LEsplitMsg;
  message LEsplitResult;
  message lockMsg;
  message lockResult;
  message lockArcMsg;

  // ------------------------ Global Read-only Data -------------------------
  readonly CProxy_chunk mesh;
  initnode void refineChunkInit(void);

  // ---------------------------- Chare Arrays ------------------------------
  array [1D] chunk {
    entry chunk(int nChunks);
    entry void refineElement(int idx, double volume);
    entry void refineElement(int idx);
    entry [threaded] void refiningElements();	
    entry void coarsenElement(int idx, double volume);
    entry [threaded] void coarseningElements();	
    entry [threaded] void improveMesh();
    entry [threaded] void relocatePoints();
    entry [threaded] void flippingElements();	
    entry [sync] intMsg *lockChunk(int lh, double prio);
    entry [sync] void unlockChunk(int lh);
 
    // mesh debug I/O
    entry [sync, threaded] void print();
    entry [sync, threaded] void out_print();

    // entries to node data
    entry [sync] nodeMsg *getNode(int n);
    entry [sync] void updateNodeCoord(nodeMsg *);
    entry void relocationVote(nodeVoteMsg *);

    // entries to get data in mesh in stand-alone mode
    entry [sync] void newMesh(meshMsg *);	
    entry [sync] void updateNodeCoords(coordMsg *);
    entry [sync] void refine();
    entry void start();
    entry [sync] void improve();
    entry [sync] void finalizeImprovements();
    entry void deriveFaces();

    // entries to element data
    entry [sync,threaded] doubleMsg *getVolume(intMsg *im);
    entry [sync] void setTargetVolume(doubleMsg *);
    entry [sync] void resetTargetVolume(doubleMsg *);
    entry [sync] refMsg *findRemoteNeighbor(threeNodeMsg *);
    entry [sync] intMsg *checkFace(int idx, elemRef face);
    entry [sync] intMsg *checkFace(int idx, node n1, node n2, node n3, elemRef nbr);
    entry [sync] intMsg *lockLF(int idx, node n1, node n2, node n3, node n4, 
	elemRef myRef, double prio);
    entry [sync] splitResponse *splitLF(int idx, node in1, node in2, node in3,
	node in4, elemRef requester);
    entry [sync] LEsplitResult *LEsplit(LEsplitMsg *);
    entry [sync,threaded] lockResult *lockArc(lockArcMsg *);
    entry [sync] void unlockArc1(int idx, int prio, elemRef parentRef, elemRef destRef, 
	node aNode, node bNode);
    entry [sync] void unlockArc2(int idx, int prio, elemRef parentRef, elemRef destRef, 
	node aNode, node bNode);
    entry [sync] void updateFace(int idx, int rcid, int ridx);
    entry void updateFace(int idx, elemRef oldElem, elemRef newElem);
    entry [sync] flip23response *flip23remote(flip23request *);
    entry [sync] flip32response *flip32remote(flip32request *);
    entry [sync] flip32response *remove32element(flip32request *);
    entry void checkRefine();
  };
};
