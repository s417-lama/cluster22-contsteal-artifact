module fftlib {

	message SendFFTMsg {complex data[];};

	// The following arrays do not have entry methods corresponding to
	// constructors. The user array that inherit from these should provide
	// contructor entry methods

	array [1D] SlabArray {

	};


	// the application should make an array derived from this
	array [1D] NormalSlabArray: SlabArray { 
		entry NormalSlabArray(NormalFFTinfo &info, 
			CProxy_NormalSlabArray src, CProxy_NormalSlabArray dest);
		entry void acceptDataForFFT(int numPoints, complex points[numPoints], int posn, int info_id);
		entry void acceptDataForIFFT(int numPoints, complex points[numPoints], int posn, int info_id);
	};
	array [1D] NormalRealSlabArray: SlabArray { 
		entry void acceptDataForFFT(int numPoints, complex points[numPoints], int posn, int info_id);
		entry void acceptDataForIFFT(int numPoints, complex points[numPoints], int posn, int info_id);
	};
/*
	// the application should make an array derived from this
	array [2D] SparseSlabArray: SlabArray { 
		entry void acceptDataForFFT(int n, int flags[n], int numPoints, complex points[numPoints], int posn);
		entry void acceptDataForIFFT(int num, int flags[n], int numPoints, complex points[numPoints], int posn);
	};
*/

	array [2D] NormalLineArray {
		entry NormalLineArray (LineFFTinfo &info, 
			CProxy_NormalLineArray _xProxy, CProxy_NormalLineArray _yProxy, CProxy_NormalLineArray _zProxy);
		entry void doFirstFFT(int id, int direction);
		entry void doSecondFFT(SendFFTMsg *msg);
		entry void doThirdFFT(SendFFTMsg *msg);
	};
};
