module MetaBalancer {
  readonly CkGroupID _metalb;
  readonly CkGroupID _metalbred;

  mainchare MetaLBInit {
    entry MetaLBInit(CkArgMsg *m);
  };

  initnode void registerLBDataCollection(void);
  group [migratable] MetaBalancer {
    entry void MetaBalancer(void);  
    initnode void initnodeFn();

    entry [expedited, reductiontarget] void ReceiveMinStats(double load[n], int n);
    entry [expedited] void LoadBalanceDecision(int req_no, int period);
    entry [expedited] void LoadBalanceDecisionFinal(int req_no, int period);
    entry [expedited] void ReceiveIterationNo(int);
    entry [expedited] void RegisterNoObjCallback(int);
    entry [expedited] void TriggerAdaptiveReduction();
    entry [expedited] void MetaLBCallLBOnChares();
    entry [expedited] void MetaLBSetLBOnChares(int switchFrom, int switchTo);
    entry [expedited] void PreviousAvgLoad(double avg);
  }

  // This group is used only to handle reduction to obtain the maximum
  // iteration. This reduction cannot incorporated in MetaBalancer class because
  // there exists a reduction to collect minimum stats and this would overlap
  // with that as there is no specific order.
  group [migratable] MetaBalancerRedn {
    entry void MetaBalancerRedn(void);
    entry [expedited, reductiontarget] void ReceiveIterNo(int max_iter);
    entry void getMaxIter(int);
  }

};
