mainmodule startupTest {

  readonly int arrSize;
  readonly int intOne;
  readonly double dOne;
  readonly double dTwo;
  readonly double WasteUnits;
	
  readonly CkVec<int> IntArrOne;
  readonly CkVec<int> IntArrTwo;
  readonly CkVec<int> IntArrThree;
  readonly CkVec<int> IntArrFour;
  readonly CkVec<int> IntArrFive;
  readonly CkVec<CProxy_groupTest> groupProxy;
  readonly CkVec<CProxy_groupTestX> groupProxyX;
  readonly CkHashtableT<intdual, int> mapSix;


  readonly CProxy_main mainProxy;		
  readonly CProxy_ReadArrZero zeroProxy;		
  readonly CProxy_ReadArrOne oneProxy;		
  readonly CProxy_ReadArrTwo twoProxy;		
  readonly CProxy_ReadArrThree threeProxy;		
  readonly CProxy_ReadArrFour fourProxy;		
  readonly CProxy_ReadArrFive fiveProxy;		
  readonly CProxy_ReadArrSix sixProxy;		
  readonly CProxy_ReadArrSeven sevenProxy;		

  mainchare main {
    entry main(CkArgMsg *m);
    entry void createReport(CkReductionMsg *msg);	
    entry void doneReport(CkReductionMsg *msg);	
  };

  group groupTest {
    entry groupTest(int);
  }	

  group groupTestX {
    entry groupTestX(int);
  }	

  array [1D] ReadArrZero {
    entry ReadArrZero(int, double);
    entry void receiveRed(CkReductionMsg *m);
    entry void dowork(void);	
  };        	

  array [1D] ReadArrOne {
    entry ReadArrOne(int, double, CkCallback);
    entry void dowork(void);	
  };        	

  array [1D] ReadArrTwo {
    entry ReadArrTwo(int, double, CkCallback);
    entry void dowork(void);	
  };        	

  array [1D] ReadArrThree {
    entry ReadArrThree(int, double, CkCallback);
    entry void dowork(void);	
  };        	

  array [1D] ReadArrFour {
    entry ReadArrFour(int, double, CkCallback);
    entry void dowork(void);	
  };        	

  array [1D] ReadArrFive {
    entry ReadArrFive(int, double, bool, CkCallback);
    entry void dowork(void);	
  };        	

  array [2D] ReadArrSix {
    entry ReadArrSix(int, int, double, CkCallback);
    entry void dowork(void);	
  };        	

  array [2D] ReadArrSeven {
    entry ReadArrSeven(int, int, double, bool, CkCallback);
    entry void dowork(void);	
  };        	

	
  group OneMap : CkArrayMap {
	entry OneMap(double);
  };

  group TwoMap : CkArrayMap {
	entry TwoMap(double);
  };
  group ThreeMap : CkArrayMap {
	entry ThreeMap(double);
  };
  group FourMap : CkArrayMap {
	entry FourMap(double);
  };
  group FiveMap : CkArrayMap {
	entry FiveMap(double);
  };

  group SixMap : CkArrayMap {
	entry SixMap(double);
  };
};
