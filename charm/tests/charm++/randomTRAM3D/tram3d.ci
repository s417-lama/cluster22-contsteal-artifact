mainmodule tram3d {
  mainchare main {
    entry main(CkArgMsg*);
    entry [reductiontarget] void endexec(int);
  };
  readonly CProxy_main master;
  array [3D] Test {
    entry Test();
    entry Test(int,int);
    entry void run() {
      for (count1=0;count1!=N;++count1) {
        for (count2=0;count2!=N;++count2) {
          for (count3=0;count3!=N;++count3) serial {
            thisProxy(count1,count2,count3).clock(values[count1*N*N+count2*N+count3]);
          }
        }
      }
      for (count1=0;count1!=N*N*N;++count1) {
        when clock(int j) serial {
          recvd.emplace_back(j);
        }
      }
      serial {
        auto min_iter=std::min_element(recvd.begin(),recvd.end());
        CkCallback cb(CkReductionTarget(main,endexec),master);
        contribute(sizeof(int),&(*min_iter),CkReduction::sum_int,cb);
        //addressof and dereference done since iterators != pointers
      }
    }
    entry [aggregate] void clock(int);
  };
};
