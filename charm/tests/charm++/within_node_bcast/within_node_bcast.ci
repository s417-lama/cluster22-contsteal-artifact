mainmodule within_node_bcast {

  message TestMessage {
    int data[];
  };

  readonly CProxy_TestNodeGroup ngProxy;
  readonly CProxy_TestGroup gProxy;
  readonly CProxy_TestArray aProxy;

  mainchare Main {
    entry Main(CkArgMsg* msg);
    entry void allComplete();
    entry [reductiontarget] void testDone(int result);
    entry void runTests() {
      serial { CkPrintf("Testing within-node broadcast\n"); }
      for (test_num = 0; test_num < ITERATIONS; test_num++) {
        serial {
          CkCallback cb(CkReductionTarget(Main, testDone), thisProxy);
          TestMessage* msg = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg->data, msg->data + DATA_SIZE, test_num);
          msg->counter.store(msg->test_num);
          ngProxy.recvCopy(msg);
        }

        when testDone(int result1), testDone(int result2) serial {
          if (result1 != result2) {
            CkAbort("Results for test %i/%i do not match! (%i, %i)\n",
                test_num+1, ITERATIONS, result1, result2);
          }
        }
      }
      serial { tests_completed++; }

      serial { CkPrintf("Testing [nokeep] within-node broadcast\n"); }
      for (test_num = 0; test_num < ITERATIONS; test_num++) {
        serial {
          CkCallback cb(CkReductionTarget(Main, testDone), thisProxy);
          TestMessage* msg = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg->data, msg->data + DATA_SIZE, test_num);
          ngProxy.recv(msg);
        }

        when testDone(int result1), testDone(int result2) serial {
          if (result1 != result2) {
            CkAbort("Results for test %i/%i do not match! (%i, %i)\n",
                test_num+1, ITERATIONS, result1, result2);
          }
        }
      }
      serial { tests_completed++; }

      serial { CkPrintf("Testing group broadcast\n"); }
      for (test_num = 0; test_num < ITERATIONS; test_num++) {
        serial {
          CkCallback cb(CkReductionTarget(Main, testDone), thisProxy);
          TestMessage* msg1 = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg1->data, msg1->data + DATA_SIZE, test_num);
          msg1->counter.store(msg1->test_num);
          ngProxy.recvCopyNoFwd(msg1);

          TestMessage* msg2 = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg2->data, msg2->data + DATA_SIZE, test_num);
          msg2->counter.store(msg2->test_num);
          gProxy.recvCopy(msg2);
        }

        when testDone(int result1), testDone(int result2) serial {
          if (result1 != result2) {
            CkAbort("Results for test %i/%i do not match! (%i, %i)\n",
                test_num+1, ITERATIONS, result1, result2);
          }
        }
      }
      serial { tests_completed++; }

      serial { CkPrintf("Testing [nokeep] group broadcast\n"); }
      for (test_num = 0; test_num < ITERATIONS; test_num++) {
        serial {
          CkCallback cb(CkReductionTarget(Main, testDone), thisProxy);

          TestMessage* msg1 = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg1->data, msg1->data + DATA_SIZE, test_num);
          ngProxy.recvNoFwd(msg1);

          TestMessage* msg2 = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg2->data, msg2->data + DATA_SIZE, test_num);
          gProxy.recv(msg2);
        }

        when testDone(int result1), testDone(int result2) serial {
          if (result1 != result2) {
            CkAbort("Results for test %i/%i do not match! (%i, %i)\n",
                test_num+1, ITERATIONS, result1, result2);
          }
        }
      }
      serial { tests_completed++; }

      serial { CkPrintf("Testing array broadcast\n"); }
      for (test_num = 0; test_num < ITERATIONS; test_num++) {
        serial {
          CkCallback cb(CkReductionTarget(Main, testDone), thisProxy);
          TestMessage* msg1 = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg1->data, msg1->data + DATA_SIZE, test_num);
          msg1->counter.store(msg1->test_num);
          ngProxy.recvCopyForArray(msg1);

          TestMessage* msg2 = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg2->data, msg2->data + DATA_SIZE, test_num);
          msg2->counter.store(msg2->test_num);
          aProxy.recvCopy(msg2);
        }

        when testDone(int result1), testDone(int result2) serial {
          if (result1 != result2) {
            CkAbort("Results for test %i/%i do not match! (%i, %i)\n",
                test_num+1, ITERATIONS, result1, result2);
          }
        }
      }
      serial { tests_completed++; }

      serial { CkPrintf("Testing array [nokeep] broadcast\n"); }
      for (test_num = 0; test_num < ITERATIONS; test_num++) {
        serial {
          CkCallback cb(CkReductionTarget(Main, testDone), thisProxy);
          TestMessage* msg1 = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg1->data, msg1->data + DATA_SIZE, test_num);
          ngProxy.recvForArray(msg1);

          TestMessage* msg2 = new (DATA_SIZE) TestMessage(test_num, cb);
          std::fill(msg2->data, msg2->data + DATA_SIZE, test_num);
          aProxy.recv(msg2);
        }

        when testDone(int result1), testDone(int result2) serial {
          if (result1 != result2) {
            CkAbort("Results for test %i/%i do not match! (%i, %i)\n",
                test_num+1, ITERATIONS, result1, result2);
          }
        }
      }
      serial { tests_completed++; }
    }
  };

  nodegroup TestNodeGroup {
    entry TestNodeGroup();
    entry void recv(TestMessage* msg);
    entry void recvCopy(TestMessage* msg);
    entry void recvNoFwd(TestMessage* msg);
    entry void recvCopyNoFwd(TestMessage* msg);
    entry void recvForArray(TestMessage* msg);
    entry void recvCopyForArray(TestMessage* msg);
  };

  group TestGroup {
    entry TestGroup();
    entry [nokeep] void recv(TestMessage* msg);
    entry void recvCopy(TestMessage* msg);
  };

  array [1D] TestArray {
    entry TestArray();
    entry [nokeep] void recv(TestMessage* msg);
    entry void recvCopy(TestMessage* msg);
  };
};
